 번들러의 역할 : 개발자가 직접해야 할것들을 직접 할필요 없이 도와주는 것
 대표적으로
 1. css prefix를 붙여줌 sass를 쓸수 있게 해준다
 2. 리액트에서는 jsx확장자로 된 파일을 트랜스파일 해서 브라우저가 이해하는 js 바꿔준다

 빌드하는 작업은 명령어 입력시 한 폴더아래에 html,css,js로만 된 파일로 바꿔주는 작업 
 그럼 호스팅 플랫폼에서 빌드파일에 있는파일을 서빙해준다


 번들러는 parcel vite 등이 있다

 요즘 번들러는 hmr 핫모듈리로딩이 있다(데브서버에서) 데브서브는 기본으로 제공된다
 hmr은 바뀐 부분만 동적으로 바꿔준다


 Tailwind CSS 는 일반적으로 Bundler 와 함께 사용됩니다. 그냥 tailwind.css 라는 파일을 link 태그로 추가하지 않고요. 왜 그럴까요?
 cdn으로 받아오면 cdn용량이 엄청크다 제약사항이 많다
한번에 다 받아오는거 보다 번들러로 내가 쓰는거만 가져올수 있다



Node.js 의 버전은 빠르게 올라가고 있다 보니, 여러 프로젝트에서 사용하는 Node.js 버전이 제각기 다른 경우가 흔합니다.

이럴 때 관리를 잘 해주지 않으면, 엉뚱한 버전의 Node.js 를 사용해서 문제가 생기기도 한다





// const http = require("http");
// const hostname = "localhost";

// const port = 3000;

// const server = http.createServer((req, res) => {
//   res.statusCode = 200;
//   console.log(req.url, req.method); //이걸로 분기처리를 해서 각각 경로에 맞는 적절한 응답을 보낸다
//   res.setHeader("Content-Type", "text/plain");
//   res.end("hello world!");
// });

// server.listen(port, hostname, () => {
//   console.log("server listening on port " + port);
// });
import express from "express";

const app = express();

const port = 3000;
app.use(cors()) : cors문제 해결

app.use((req, res, next) => {
  console.log("미들웨어");
  next();
}); //모든 요청에 먼저 실행하고 다음으로 넘김

app.use(express.static("public"));
//서버에서 미리 파일을 서빙해주고 만약 클라이언트가 요청하면 이미지나 텍스트를 준다

app.get("/", (req, res) => {
  console.log("first");
  res.send("hi");
}); //요청오면 첫핸들러가 실행하고 성공하면 그다음 핸들러 또 그다음

app.get("/hi", (req, res) => {
  console.log("sec");
  res.send("hi");
});

app.listen(port, () => {
  console.log("server listening on port ");
});

//배포를 하는 방법은?
1. 프론트를 빌드하면 프론트가 html,cssjs 3파일로 빌드가 된다
2. 서버에서 app.use(express,static("dist))이렇게 하면 dist안에 빌드된 파일을 서버가 서빙한다

프론트엔드 코드를 express서버를 통해서 제공하는 것보단 cdn을 통하는게 성능이나 비용면에서 탁월하다

그러면 결국 빌드된 파일도 배포하고 서버도 배포해야만 정적파일들이 서빙된다
그러면 대안은 서버리스?
